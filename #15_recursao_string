Questão 1 Considere uma maneira de guardar palavras secretas (que não têm acento, nem cedilha, nem
hífen) utilizando duas cadeias de caracteres:
• a primeira cadeia contém as consoantes em suas posições corretas na palavra original e tem * nos
lugares das vogais, a menos de vogais que finalizam a palavra. Por exemplo, para a palavra
CLARABOIA, temos a cadeia CL*R*B, e para TRATOR temos TR*T*R;
• a segunda cadeia contém as vogais da palavra, na ordem em que aparecem na palavra original. Por
exemplo, para a palavra CLARABOIA, temos a cadeia AAOIA, e para TRATOR temos AO.
Escreva a função RECURSIVA exibePalavraOriginal() que:
- recebe apenas as duas cadeias que representam uma palavra (conforme descrito anteriormente); e
- exibe na tela a palavra original.
OBSERVAÇÃO: A função recursiva tem que obrigatoriamente fazer uso da definição recursiva de cadeia,
isto é, uma cadeia de caracteres é:
• a cadeia de caracteres vazia; ou
• um caractere seguido de uma cadeia de caracteres.

#include <stdio.h>
#include <string.h>
void exibePalavraOriginal(char * s, char * a)
{
if (*s == '\0')
printf("%s\n", a);
else
{
if (*s == '*')
{
printf("%c", *a);
a++;
}
else
printf("%c", *s);
exibePalavraOriginal(s + 1, a);
}
}
void exibePalavraOriginal2(char * s, char * a)
{
if (*s == '\0' && *a == '\0') // caso base 1
{
printf("\n");
return;
}
if (*s == '\0') // caso base 2
printf("%s\n", a);
else
{
if (*s == '*') // passo indutivo 1
{
printf("%c", *a);
exibePalavraOriginal2(s + 1, a + 1);
}
else // passo indutivo 2
{
printf("%c", *s);
exibePalavraOriginal2(s + 1, a);
}
}
}
int main(void)
{
char * s[] = { "CL*R*B" , "TR*T*R" , "V" , "" , "V" , "*B" };
char * a[] = { "AAOIA" , "AO" , "AIA" , "OI" , "" , "OI" };
int i;
int n = sizeof(s) / sizeof(s[0]);
printf("\n ---- Teste da 1 ----- \n");
for (i = 0; i < n; i++)
exibePalavraOriginal(s[i], a[i]);
printf("\n ---- Teste da 1 - Alternativa ----- \n");
for (i = 0; i < n; i++)
exibePalavraOriginal2(s[i], a[i]);
return 0;
}
