//Escreva a função geraSeq que, para um dado vetor v de números naturais, retorna um novo vetor (sem
//desperdício de memória) com a sequência de números naturais min, …, max, onde min e max são os menor
//e maior número natural em v respectivamente. Por exemplo, para v1 = { 5, 7, 3 }, que tem min = 3 e max = 7,
//é gerada a seguinte sequência: 3, 4, 5, 6, 7. Tome decisões adequadas de design e teste a sua função para
//as situações v1 = { 5, 7, 3 }, v2 = { 2 } e v3 = { 3, 0, 9, 2 }, conforme figura abaixo. Libere a memória alocada
//após cada um destes testes.
//Obrigatoriamente use duas funções auxiliares: void maxmin(…) que disponibiliza o maior e o menor valor
//de um vetor de números inteiros e void printIntArray(…) que imprime um vetor de números inteiros.

#include <stdio.h>
#include <stdlib.h>
void maxmin(int * v, int n, int * max, int * min)
{
 int i;
 *min = *max = v[0];
 for (i = 0; i < n; i++)
 {
 if (v[i] > *max)
*max = v[i];
 if (v[i] < *min)
*min = v[i];
 }
}
int * geraSeq(int * v, int n, int * m)
{
 int i, min, max;
 maxmin(v, n, &max, &min);
 int * seq = NULL;
 *m = (max - min) + 1;
 seq = (int *)malloc(*m * sizeof(int));
 if (seq == NULL)
 return seq;
 for (i = 0; i < *m; min++, i++)
 seq[i] = min;
 return seq;
}
void printIntArray(int * v, int n)
{
 int i;
 for (i = 0; i < n; i++)
 printf("%d ",v[i]);
 printf("\n");
}
int main(void)
{
 int v1[] = { 5, 7, 3 };
 int v2[] = { 2 };
 int v3[] = { 3, 0, 9, 2 };
 int n, m;
 int * w;
 n = 3;
 w = geraSeq(v1, n, &m);
 if (w == NULL)
 return 0;
 printf("Nova sequencia:\n");
 printIntArray(w, m);
 free(w);
 n = 1;
 w = geraSeq(v2, n, &m);
 if (w == NULL)
 return 0;
 printf("Nova sequencia:\n");
 printIntArray(w, m);
 free(w);
 n = 4;
 w = geraSeq(v3, n, &m);
 if (w == NULL)
 return 0;
 printf("Nova sequencia:\n");
 printIntArray(w, m);
 free(w);
 return 0;
}
